stages: 

  - terraform_apply
  - ansible
  - test
  - build 
  - push 
  - deploy
  - destroy

variables:
  IMAGE_NAME: asmaamaged/depi-final-project
  TAG_NAME: "latest"



terraform_apply:
  stage: terraform_apply
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:

    - terraform --version
    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - cd infrastructure
    - ls -la
  script:
    - terraform init -upgrade
    - terraform apply -auto-approve
    - terraform output -json > output.json
  # - terraform output -raw private_key_pem > private_key.pem  
  artifacts:
    paths:
      - infrastructure/output.json

  only:
    - main

ansible_deploy:
  stage: ansible
  image: python:3.11-slim
  cache:
    paths:
      - ~/.cache/pip
  before_script:
    - pip install --upgrade pip
    - pip install ansible
    - apt-get update && apt-get install -y jq openssh-client sshpass
    - cat infrastructure/output.json
    - PUBLIC_IP_1=$(jq -r '.ec2_public_ip_az1_from_module.value' infrastructure/output.json)
    - PUBLIC_IP_2=$(jq -r '.ec2_public_ip_az2_from_module.value' infrastructure/output.json)
    - private_key=$(jq -r '.private_key.value' infrastructure/output.json)
    - public_key=$(jq -r '.public_key.value' infrastructure/output.json)
    - echo "$private_key" > private_key.pem
    - echo "$public_key" > public_key.pub
    - chmod 600 private_key.pem
    - ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP_1 "echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/ubuntu"
    - ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP_2 "echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/ubuntu"
   # - scp -i private_key.pem -o StrictHostKeyChecking=no private_key.pem.pub ubuntu@$PUBLIC_IP_1:~/ec2_keys.pub
   # - scp -i private_key.pem -o StrictHostKeyChecking=no private_key.pem.pub ubuntu@$PUBLIC_IP_2:~/ec2_keys.pub
    - ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP_1 "sudo mkdir -p ~/.ssh && sudo cat ~/public_key.pub | sudo tee -a ~/.ssh/authorized_keys && sudo chmod 700 ~/.ssh && sudo chmod 600 ~/.ssh/authorized_keys"
    - ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP_2 "sudo mkdir -p ~/.ssh && sudo cat ~/public_key.pub | sudo tee -a ~/.ssh/authorized_keys && sudo chmod 700 ~/.ssh && sudo chmod 600 ~/.ssh/authorized_keys"
    - ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP_1 "echo 'SSH Connection Successful'"
    - echo "[webservers]" > inventory.yml
    - echo "$PUBLIC_IP_1 ansible_user=ubuntu" >> inventory.yml
    - echo "$PUBLIC_IP_2 ansible_user=ubuntu" >> inventory.yml
    - cat inventory.yml
    - cat ./Ansible/ansible.cfg
    - sleep 60s
    - echo "Waiting for EC2 instance to be ready..."
  script:
    - export ANSIBLE_CONFIG=./Ansible/ansible.cfg
    - ansible-playbook -i inventory.yml ./Ansible/playbook.yml --private-key=./private_key.pem -vvv
  only:
    - main


unit_tests:
  stage: test
  image: node:latest
  before_script:
    - cd app
  cache:
    paths:
      - node_modules/
  script: 
    - echo "running unit tests"
    - npm install
    - npm test

.docker_build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  script:
    - echo "building docker image"
    - docker build -t $IMAGE_NAME:$TAG_NAME .
    - docker images
    - docker save -o depi-final-project.tar $IMAGE_NAME:$TAG_NAME
  artifacts:
    paths:
      - depi-final-project.tar

.push:
  stage: push
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - mkdir -p ~/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASS | base64)\"}}}" > ~/.docker/config.json
    - docker info
    - docker load -i depi-final-project.tar
    - docker images
  script:
    - echo $CI_REGISTRY_PASS | docker login -u $CI_REGISTRY_USER --password-stdin
    - docker push $IMAGE_NAME:$TAG_NAME
  only:
    - main

build_image:
    image: docker:dind
    stage: build
    services:
        - docker:20.10.16-dind
    before_script:
        - $docker_login
        #install jq for the job temporary container
        - apk add --no-cache jq httpie
        - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
        - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
        - echo "VERSION=$VERSION" >> environmental-variables.env
    script:
        - echo $VERSION
        - docker build -t $GITLAB_REGISTRY_IMAGE:$VERSION .
    artifacts:
        reports:
            dotenv: environmental-variables.env

push_image:
    image: docker:dind
    stage: build
    needs:
        - build_image
    before_script:
        - $docker_login
    script:
        - docker push $GITLAB_REGISTRY_IMAGE:$VERSION


.deploy:
  stage: deploy
  image: ubuntu:latest
  dependencies:
    - terraform_apply
  before_script: 
    - chmod +x deploy.sh
  script:
    - ./deploy.sh

deploy to production:
  stage: deploy
  dependencies:
    - terraform_apply
  image: ubuntu:latest
  before_script:
    - private_key=$(jq -r '.private_key.value' infrastructure/output.json)
    - PUBLIC_IP=$(jq -r '.ec2_public_ip_az1_from_module.value' infrastructure/output.json)
    - PRIVATE_IP=$(jq -r '.ec2_private_ip_az1_from_module.value' infrastructure/output.json)
  script:
    # Install necessary packages
    - apt-get update && apt-get install -y openssh-client jq docker.io

    # Configure SSH keys
    - echo "$private_key" > private_key.pem
    - chmod 600 private_key.pem

    # SSH into the public EC2 instance
    - |
      ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PUBLIC_IP <<EOF
        # Set up SSH on the private instance and configure Docker if needed
        ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$PRIVATE_IP <<EON
          
          # Pull the latest image from the GitLab container registry
          docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
          docker pull $GITLAB_REGISTRY_IMAGE

          # Stop any existing instance of the application
          echo "Stopping any running instance of the application..."
          docker stop my_monolithic_app || true
          docker rm my_monolithic_app || true

          # Deploy the application container
          echo "Starting the application..."
          docker run -d --name my_monolithic_app -p 3000:3000 $GITLAB_REGISTRY_IMAGE
          
          echo "Deployment complete."
        EON
      EOF






terraform_destroy:
  stage: destroy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:

    - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - cd infrastructure
 
  script:
    - terraform init -upgrade
    - terraform destroy -auto-approve

